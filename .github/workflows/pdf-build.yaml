name: Build PDF Document

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
        description: 'Language code (e.g., en, pl, fr)'
      luaengine:
        required: true
        type: boolean
        description: 'Whether to use LuaLaTeX'
      build_type:
        required: true
        type: string
        description: 'Type of build: digital, printable, or economy'
        default: 'digital'
      convert_to_cmyk:
        required: false
        type: boolean
        default: false
      artifact_retention_days:
        required: false
        type: number
        default: 1
        description: 'Number of days to retain artifacts'
    outputs:
      number_of_pages:
        value: ${{ jobs.build.outputs.number_of_pages }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      number_of_pages: ${{ steps.check_pages.outputs.number_of_pages }}

    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Generate translations
        if: ${{ inputs.language != 'en' }}
        uses: qwrtln/po4a-action@v1
        with:
          version: "0.73"
          config: "po4a.cfg"
          args: "--no-update"

      - name: Set build environment variables
        id: set_env
        run: |
          if [[ "${{ inputs.build_type }}" == "digital" ]]; then
            echo "HOMM3_PRINTABLE=" >> $GITHUB_ENV
            echo "HOMM3_NO_ART_BACKGROUND=" >> $GITHUB_ENV
            echo "OUTPUT_FILENAME=main_${{ inputs.language }}.pdf" >> $GITHUB_ENV
            echo "ARTIFACT_NAME=main_${{ inputs.language }}" >> $GITHUB_ENV
          elif [[ "${{ inputs.build_type }}" == "printable" ]]; then
            echo "HOMM3_PRINTABLE=1" >> $GITHUB_ENV
            echo "HOMM3_NO_ART_BACKGROUND=" >> $GITHUB_ENV
            echo "OUTPUT_FILENAME=printable_${{ inputs.language }}.pdf" >> $GITHUB_ENV
            echo "ARTIFACT_NAME=printable_${{ inputs.language }}" >> $GITHUB_ENV
          elif [[ "${{ inputs.build_type }}" == "economy" ]]; then
            echo "HOMM3_PRINTABLE=1" >> $GITHUB_ENV
            echo "HOMM3_NO_ART_BACKGROUND=1" >> $GITHUB_ENV
            echo "OUTPUT_FILENAME=economy_printable_${{ inputs.language }}.pdf" >> $GITHUB_ENV
            echo "ARTIFACT_NAME=economy_printable_${{ inputs.language }}" >> $GITHUB_ENV
          fi

      - name: Cache built PDF
        uses: actions/cache@v4
        if: github.event_name == 'pull_request'
        id: cache-pdf
        with:
          path: |
            ./${{ env.OUTPUT_FILENAME }}
          key: >-
            pdf-${{ inputs.build_type }}-${{ inputs.language }}-${{
            inputs.language == 'en'
            && hashFiles('main_en.tex', 'metadata.tex', 'structure.tex', 'sections/*.tex', 'assets/**/*', 'latexmkrc', 'index_style.ist')
            || hashFiles('main_${{ inputs.language }}.tex', 'metadata.tex', 'structure.tex', format('sections/translated/{0}/*.tex', inputs.language), 'assets/**/*', format('translations/assets/{0}/**/*', inputs.language), 'latexmkrc', 'index_style.ist')
            }}
          restore-keys: |
            pdf-${{ inputs.build_type }}-${{ inputs.language }}-

      - name: Cache Inkscape artifacts
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ./svg-inkscape
          key: >-
            inkscape-${{ hashFiles('assets/glyphs/*') }}
          restore-keys: |
            inkscape-

      - name: Cache LaTeX packages and build
        uses: actions/cache@v4
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        with:
          path: |
            ./main_${{ matrix.language }}.aux
            ./main_${{ matrix.language }}.fdb_latexmk
            ./main_${{ matrix.language }}.fls
            ./main_${{ matrix.language }}.out
            ./main_${{ matrix.language }}.toc
            ./**/*.aux
          key: >-
            texlive-${{ inputs.language }}-${{ inputs.build_type }}-${{
            inputs.language == 'en'
            && hashFiles('main_en.tex', 'metadata.tex', 'structure.tex', 'sections/*.tex')
            || hashFiles(format('main_{0}.tex', inputs.language), 'metadata.tex', 'structure.tex', format('sections/translated/{0}/*.tex', inputs.language))
            }}
          restore-keys: |
            texlive-${{ inputs.build_type }}-${{ inputs.language }}-

      - name: Compile PDF
        uses: xu-cheng/latex-action@v3
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        with:
          extra_system_packages: "inkscape"
          latexmk_use_lualatex: ${{ inputs.luaengine }}
          latexmk_shell_escape: true
          pre_compile: export HOMM3_GITHUB_BUILD=1 HOMM3_PRINTABLE=${{ env.HOMM3_PRINTABLE }} HOMM3_NO_ART_BACKGROUND=${{ env.HOMM3_NO_ART_BACKGROUND }} HOMM3_LANG=${{ inputs.language }}
          root_file: main_${{ inputs.language }}.tex

      - name: Find test string
        id: test
        if: github.event_name == 'pull_request' && steps.cache-pdf.outputs.cache-hit != 'true'
        run: |
          NEEDLE="$(grep TEST_SUBSTRING= main_${{ inputs.language }}.tex | cut -f2 -d=)"
          if [[ -z "$NEEDLE" ]]; then
            echo "No TEST_SUBSTRING found in main_${{ inputs.language }}.tex."
            exit 1
          fi
          echo "NEEDLE=$NEEDLE" >> $GITHUB_OUTPUT

      - name: Optimize PDF
        id: optimize
        uses: qwrtln/optimize-pdf@v1
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        with:
          file-name: main_${{ inputs.language }}.pdf
          quality-level: prepress
          output-file: ${{ env.OUTPUT_FILENAME }}
          test-string: ${{ steps.test.outputs.needle }}
          convert-to-cmyk: ${{ inputs.convert_to_cmyk }}

      - name: Check number of pages
        if: inputs.language == 'en'
        id: check_pages
        run: |
          if [[ "${{ steps.cache-pdf.outputs.cache-hit }}" == 'true' ]]; then
            NUMBER_OF_PAGES=$(docker run --rm  -v "`pwd`:/app" -w /app minidocks/poppler pdfinfo ${{ env.OUTPUT_FILENAME }} | awk '/^Pages:/ {print $2}')
          else
            NUMBER_OF_PAGES=${{ steps.optimize.outputs.page-count }}
          fi
          echo "number_of_pages=${NUMBER_OF_PAGES}" > $GITHUB_OUTPUT

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.OUTPUT_FILENAME }}
          retention-days: ${{ inputs.artifact_retention_days }}
