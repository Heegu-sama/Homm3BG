name: Build PDF Document

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
        description: 'Language code (e.g., en, pl, fr)'
      luaengine:
        required: true
        type: boolean
        description: 'Whether to use LuaLaTeX'
      build_type:
        required: true
        type: string
        description: 'Type of build: digital, printable, or economy'
        default: 'digital'
      artifact_retention_days:
        required: false
        type: number
        default: 1
        description: 'Number of days to retain artifacts'


env:
  GHOSTSCRIPT_URL: https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs10030/gs_10.03.0_amd64_snap.tgz

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      num_of_pages: ${{ steps.check_pages.outputs.num_of_pages }}

    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Generate translations
        if: ${{ inputs.language != 'en' }}
        uses: qwrtln/po4a-action@v1
        with:
          version: "0.73"
          config: "po4a.cfg"
          args: "--no-update"

      - name: Cache LaTeX packages and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.texlive
            ~/.texmf-var
            ./**/*.aux
            ./**/*.fdb_latexmk
            ./**/*.fls
            ./**/*.log
            ./**/*.out
            ./**/*.toc
          key: >-
            texlive-${{ inputs.language }}-${{ inputs.build_type }}-${{
            inputs.language == 'en'
            && hashFiles('main_en.tex', 'metadata.tex', 'sections/*.tex')
            || hashFiles(format('main_{0}.tex', inputs.language), 'metadata.tex', format('sections/translated/{0}/*.tex', inputs.language))
            }}
          restore-keys: |
            texlive-${{ inputs.language }}-${{ inputs.build_type }}-

      - name: Set build environment variables
        id: set_env
        run: |
          if [[ "${{ inputs.build_type }}" == "digital" ]]; then
            echo "HOMM3_PRINTABLE=" >> $GITHUB_ENV
            echo "HOMM3_NO_ART_BACKGROUND=" >> $GITHUB_ENV
            echo "OUTPUT_FILENAME=main_${{ inputs.language }}.pdf" >> $GITHUB_ENV
            echo "ARTIFACT_NAME=main_${{ inputs.language }}" >> $GITHUB_ENV
          elif [[ "${{ inputs.build_type }}" == "printable" ]]; then
            echo "HOMM3_PRINTABLE=1" >> $GITHUB_ENV
            echo "HOMM3_NO_ART_BACKGROUND=" >> $GITHUB_ENV
            echo "OUTPUT_FILENAME=printable_${{ inputs.language }}.pdf" >> $GITHUB_ENV
            echo "ARTIFACT_NAME=printable_${{ inputs.language }}" >> $GITHUB_ENV
          elif [[ "${{ inputs.build_type }}" == "economy" ]]; then
            echo "HOMM3_PRINTABLE=1" >> $GITHUB_ENV
            echo "HOMM3_NO_ART_BACKGROUND=1" >> $GITHUB_ENV
            echo "OUTPUT_FILENAME=economy_printable_${{ inputs.language }}.pdf" >> $GITHUB_ENV
            echo "ARTIFACT_NAME=economy_printable_${{ inputs.language }}" >> $GITHUB_ENV
          fi

      - name: Compile PDF
        uses: xu-cheng/latex-action@v3
        with:
          extra_system_packages: "inkscape"
          latexmk_use_lualatex: ${{ inputs.luaengine }}
          latexmk_shell_escape: true
          pre_compile: export HOMM3_GITHUB_BUILD=1 HOMM3_PRINTABLE=${{ env.HOMM3_PRINTABLE }} HOMM3_NO_ART_BACKGROUND=${{ env.HOMM3_NO_ART_BACKGROUND }} HOMM3_LANG=${{ inputs.language }}
          root_file: main_${{ inputs.language }}.tex

      - name: Install ghostscript
        run: |
          wget --quiet ${{ env.GHOSTSCRIPT_URL }}
          tar -xvf *_amd64_snap.tgz
          sudo snap install ./*_amd64_snap/*_amd64.snap --devmode

      - name: Optimize PDF
        run: |
          du -sh main_${{ inputs.language }}.pdf
          if [[ "${{ inputs.build_type }}" == "digital" ]]; then
            tools/optimize.sh ${{ inputs.language }}
          else
            tools/optimize.sh ${{ inputs.language }} --cmyk
          fi
          mv main_${{ inputs.language }}_optimized.pdf main_${{ inputs.language }}.pdf
          du -sh main_${{ inputs.language }}.pdf

      - name: Rename output file
        run: |
          mkdir -p output
          mv main_${{ inputs.language }}.pdf output/${{ env.OUTPUT_FILENAME }}

      - name: Install poppler
        run: sudo apt-get update && sudo apt-get install -y poppler-utils

      - name: Check number of pages
        run: |
          NUM_OF_PAGES=$(pdfinfo output/${{ env.OUTPUT_FILENAME }} | awk '/^Pages:/ {print $2}')
          echo "Number of pages: ${NUM_OF_PAGES}"
          mkdir -p page_count
          echo "${NUM_OF_PAGES}" > page_count/${{ inputs.language }}_${{ inputs.build_type }}_page_count.txt

      - name: Check for broken CMap
        run: |
          NEEDLE="$(grep TEST_SUBSTRING= main_${{ inputs.language }}.tex | cut -f2 -d=)"
          if [[ -z "$NEEDLE" ]]; then
            echo "No TEST_SUBSTRING found in main_${{ inputs.language }}.tex."
            exit 1
          fi
          pdftotext output/${{ env.OUTPUT_FILENAME }} - | tr '\n' ' ' > output/${{ env.OUTPUT_FILENAME }}.txt
          if grep -iq "$NEEDLE" output/${{ env.OUTPUT_FILENAME }}.txt
          then
            echo "All good"
          else
            echo "The CMap in output/${{ env.OUTPUT_FILENAME }} file is broken. See the output of 'Optimize PDF' step above."
            exit 1
          fi

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: output/${{ env.OUTPUT_FILENAME }}
          retention-days: ${{ inputs.artifact_retention_days }}

      - name: Upload page count artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.language }}_${{ inputs.build_type }}_page_count
          path: page_count/${{ inputs.language }}_${{ inputs.build_type }}_page_count.txt
          retention-days: ${{ inputs.artifact_retention_days }}
