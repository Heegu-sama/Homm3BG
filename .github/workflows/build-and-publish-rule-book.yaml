name: Build and Publish Rule Book

on:
  push:
    branches:
      - main
  pull_request:
    branches: [main]

jobs:
  matrix-setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      run: |
        cat << 'EOF' > matrix.json
        {
          "include": [
            { "language": "en", "luaengine": false },
            { "language": "pl", "luaengine": false },
            { "language": "es", "luaengine": false },
            { "language": "fr", "luaengine": false },
            { "language": "ru", "luaengine": true },
            { "language": "ua", "luaengine": true },
            { "language": "de", "luaengine": false },
            { "language": "cs", "luaengine": true },
            { "language": "he", "luaengine": true }
          ]
        }
        EOF
        echo "matrix=$(jq -c . matrix.json)" >> $GITHUB_OUTPUT

  digital_build:
    needs: matrix-setup
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix) }}
    uses: ./.github/workflows/pdf-build.yaml
    with:
      language: ${{ matrix.language }}
      luaengine: ${{ matrix.luaengine }}
      build_type: digital

  printable_build:
    needs: matrix-setup
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix) }}
    uses: ./.github/workflows/pdf-build.yaml
    with:
      language: ${{ matrix.language }}
      luaengine: ${{ matrix.luaengine }}
      build_type: printable
      convert_to_cmyk: true

  economy_build:
    needs: matrix-setup
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix) }}
    uses: ./.github/workflows/pdf-build.yaml
    with:
      language: ${{ matrix.language }}
      luaengine: ${{ matrix.luaengine }}
      build_type: economy

  check_pages:
    needs: [digital_build, printable_build]
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    container:
      image: minidocks/poppler
    strategy:
      fail-fast: false
      matrix:
        language: ["pl", "es", "fr", "ru", "ua", "de", "cs", "he"]
    steps:
      - name: Download digital PDF
        uses: actions/download-artifact@v4
        with:
          name: main_${{ matrix.language }}

      - name: Check number of pages in digital version
        run: |
          ACTUAL_NUM_OF_PAGES=$(pdfinfo main_${{ matrix.language }}.pdf | awk '/^Pages:/ {print $2}')
          echo "Expected number of pages: ${{ needs.digital_build.outputs.number_of_pages }}"
          echo "Actual number of pages:   ${ACTUAL_NUM_OF_PAGES}"
          if [[ ${{ needs.digital_build.outputs.number_of_pages }} != ${ACTUAL_NUM_OF_PAGES} ]]; then
            echo "The digital document in ${{ matrix.language }} language doesn't have correct number of pages. See the output above."
            exit 1
          fi

      - name: Download printable PDF
        uses: actions/download-artifact@v4
        with:
          name: printable_${{ matrix.language }}

      - name: Check number of pages in printable version
        run: |
          ACTUAL_NUM_OF_PAGES=$(pdfinfo printable_${{ matrix.language }}.pdf | awk '/^Pages:/ {print $2}')
          echo "Expected number of pages: ${{ needs.printable_build.outputs.number_of_pages }}"
          echo "Actual number of pages:   ${ACTUAL_NUM_OF_PAGES}"
          if [[ ${{ needs.printable_build.outputs.number_of_pages }} != ${ACTUAL_NUM_OF_PAGES} ]]; then
            echo "The digital document in ${{ matrix.language }} language doesn't have correct number of pages. See the output above."
            exit 1
          fi

  publish:
    runs-on: ubuntu-latest
    needs: [digital_build, printable_build, economy_build]
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        language: ["en", "pl", "es", "fr", "ru", "ua", "de", "cs", "he"]
    steps:
      - name: Create dir
        run: mkdir ${{ matrix.language }}

      - name: Download compiled books
        uses: actions/download-artifact@v4
        with:
          pattern: "*_${{ matrix.language }}"
          path: ${{ matrix.language }}
          merge-multiple: true

      - name: Publish ${{ matrix.language }} in artifacts repository
        uses: peaceiris/actions-gh-pages@v4
        with:
          deploy_key: ${{ secrets.SSH_DEPLOY_KEY_BUILD_ARTIFACTS }}
          external_repository: qwrtln/Homm3BG-build-artifacts
          publish_branch: ${{ matrix.language }}
          publish_dir: ./${{ matrix.language }}
          force_orphan: true
